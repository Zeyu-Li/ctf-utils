from typing import Tuple, List
from util import sieve_of_eratosthenes, gcd

def cracker(t: int, n: int, e: int) -> Tuple[int, int, int]:
    """
    Hack RSA assuming there are no primes larger than t
    """
    # assume p <= q
    # create sieve of eratosthenes
    prime_values = sieve_of_eratosthenes(t)

    # while prime_values:
    # prime_values = set(range(2, t + 1))
    for prime in prime_values:
        # return the p, q, d where 
        # p, q are primes, (p-1)(q-1) = coprime key
        # e coprime to key 
        # d = e^-1 mod key
        p = prime
        if n % p != 0:
            continue
        q = n//p
        # check if p and q are coprime
        coprime_key=(p-1) * (q-1)
        # if coprime, continue
        if gcd(coprime_key, e) != 1:
            continue
        d = pow(e, -1, coprime_key)
        # print([p, q, d])
        return p, q, d

def crack_known_set_block_1(blocks: List[int], n: int, e: int, plain_alphabet_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 !?.') -> str:
    """
    Hack RSA assuming a block size of 1
    """
    res = ''
    if isinstance(plain_alphabet_set, str):
        for block in blocks:
            for i, letter in enumerate(plain_alphabet_set):
                if pow(i, e, n) == block:
                    res += letter
                    break
    elif isinstance(plain_alphabet_set, dict):
        try:
            for block in blocks:
                for i, letter in plain_alphabet_set.items():
                    if pow(i, e, n) == block:
                        res += letter
                        break
        except:
            return TypeError("Plain Alphabet Set is not a regular dictionary with int: string pairs")

    return res

def test():
    "Run tests"
    assert cracker(100, 493, 5) == (17, 29, 269)
    assert cracker(2**16,2604135181,1451556085) == (48533, 53657, 60765)
    
    alpha_set = dict()
    for i, v in enumerate('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 !?.'):
        alpha_set[i] = v
    
    blocks = [2361958428825, 564784031984, 693733403745, 693733403745,2246930915779, 1969885380643]
    n = 3328101456763
    e = 1827871
    

    assert crack_known_set_block_1(blocks, n, e, alpha_set) == "Hello."
    
    blocks = [8217093464028267756409121975787649727933459189613422251056325170128526701608620475172185518043933365298063560742917952159894519863718833263752274042699949617683732661977980412906177305753828819709902244798411894957839707416475280564510910539611544763475123200435434311747842117356528438104670930882089586419285856032456378608099724911919954461399235715511565874538563416970589758277955530087901898217760161217942978391412608505655878814744003765499912581874698703855122674006520835964840975798858622937598839701123281953550868741086184689078242396071897468227558770251846123495197500143759195745133750189771825944450, 7794849320058479483235891570659555002266016547375155834271627867232877707310686790358172752591166222952135096373989699483104805316856153503741983293358686753188375741973694329392994830502219184017253699426225203204479818398602798841738289079920025749304481118864970459430204942049774099091706012023576242951916485698335778583965668014176271693262483148735621817830715145802321491177028501685437330042196652369438353310438870251993388131533357463647258332911941779957582075391493380354231397611607186341163941024721520264506866440403387399875233563475262156689804165564673403583255707102008482769737413240138230958182, 12921037742071842838760612855709802789742552166321664243236891153163955849558252920592898602118263261213407974900684434010883026670588092306944401569637152000644460339661723917340434416156588842120373940380152943221580276004025446469754341544565080637093175331867219444193442557166370387868976245206176371221058518395771129731888292946728299805144265754939474820707438607118730723936438054431075644195757332190639459871665601164359175913274985607634418838742313905513941672317865583833185045818796653788468472146393575895052890874263007974561104147114534063546426622401801687487372757585940996398469423368928561634153, 12921037742071842838760612855709802789742552166321664243236891153163955849558252920592898602118263261213407974900684434010883026670588092306944401569637152000644460339661723917340434416156588842120373940380152943221580276004025446469754341544565080637093175331867219444193442557166370387868976245206176371221058518395771129731888292946728299805144265754939474820707438607118730723936438054431075644195757332190639459871665601164359175913274985607634418838742313905513941672317865583833185045818796653788468472146393575895052890874263007974561104147114534063546426622401801687487372757585940996398469423368928561634153, 11217848754370060151048974509138651367934833846856181914172526865271196973227973032958612071893373870407446424067680428630794833492801574226036772013744651703272011592223995028183588732796708347553596193448469475295048437727499751749496444421871657849036504282377268139817245032192365191518837255326856917027646290383427223544956908427184201140658035239138396681337096013574579279483715854818342002069247473720230879419277515984070934140196174763483942769470443402428741643946856117267859915842392146436529953027444575692012221653374875506494244051455381519411633262533669938622103477152752725216164511652885829931714, 5269654085949312771073284947587463857888800692504926890619354180452852887754690431889392303915723227289884011835096376277337260158302696454089779029540381125567345773162164162213999188043412342585674623646990639766887073454749409214452182338719532431496214971749963450145600078901526394079060905423418009998366490597263514827734649811017719359163561650292798212771095874986931024450160177247698999693852849233711372327005486392709492792111605163663434174292028563844987756427304588985033119954782539430440883646440136433564182087334544672124822547097861537409539709652980649167018619231904494447517171734111089893150]
    n = 14118956157108293655346808051133433894091646039538312006923399735362493605263203702497585893776717003286326229134304078204210728995962809448233282087726441833718356477474042405336332872075207334696535304102256981804931805888502587515310873257966538377740407422137907772437613376342940374815839154897315760145075243071401233858428232725214391295151698044147558454184807105787419519119343953276836694146614061330872356766933442169358208953710231872729486994792595105820069351163066330362191163434473421951082966346860965671789280887020440983279967498480147232734401682910892741619433374703999689201536556462802829353073
    e = 100718103971294791099836725874012546370680926012185805765401052276262582385715159775366446162659948559753647672663811614813769790164114531293175203029620427243719599468958551745636665558941526164523429965489703529940030465646848449715020479155556561228677211251598560502855023412904336022230634725973056990069

    assert crack_known_set_block_1(blocks, n, e) == "Hello."

test()
